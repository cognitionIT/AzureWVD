name: WVDCreateHostpool
on:
  push:
    branches:
      - wvd-deployments

env:
  AZURE_HOSTPOOL_NAME: "hp-wvd"                  # set this to the WVD Hostpool name to add the instances
  AZURE_NUMBER_OF_INSTANCES: 2                   # set this to the number of instances to add to the WVD Hostpool

jobs:
  build:
    runs-on: windows-latest
    steps:
    # Authentication: log on to Azure with the AZURE_CREDENTIALS secret
    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
        enable-AzPSSession: true 
    
    # Checkout your GitHub Workspace
    - name: Checkout
      uses: actions/checkout@v1
    
    # Run an inline PowerShell script    
    - name: Run Azure PowerShell script (inline)
      uses: azure/powershell@v1
      with:
        inlineScript: |
          # Read the environment variables in PowerShell
          $HostPoolName = [System.Environment]::GetEnvironmentVariable('AZURE_HOSTPOOL_NAME')
          $NumberOfInstances = [System.Environment]::GetEnvironmentVariable('AZURE_NUMBER_OF_INSTANCES')
          # Retrieve the Subscription information for the Service Principal (that is logged on)
          $azSubscriptions = Get-AzSubscription
          # Retrieve the given Host Pool information
          try 
          {
              $hostPool = Get-AzWvdHostPool -SubscriptionId $($azSubscriptions.Id) | Where {$_.Name -eq $HostPoolName}
          }
          catch 
          {
              Write-Error ("A [" + $_.Exception.GetType().FullName + "] ERROR occurred. " + $_.Exception.Message)
              Exit
          }
          If ($hostPool.Count -gt 0)
          {
              $hostpoolRG = $hostPool.Id.Split("/")[4]
              $hostpoolName = $hostPool.Id.Split("/")[-1]
              # Retrieve the current Session Host information
              try
              {
                  $sessionHosts = Get-AzWvdSessionHost -HostPoolName $($hostpool.Name) -ResourceGroupName $($hostpoolRG)
              }
              catch
              {
                  Write-Error ("A [" + $_.Exception.GetType().FullName + "] ERROR occurred. " + $_.Exception.Message)
                  Exit
              }
              $sessionHost = $sessionHosts[0]
              # Retrieve sensitive information from KeyVault
              $secureAdminPassword = (Get-AzKeyVaultSecret -VaultName kv-infrasecrets -Name domainadminpassword).SecretValue
              $secureDomainAdminUser = (Get-AzKeyVaultSecret -VaultName kv-infrasecrets -Name domainadminuser).SecretValue
              $secureDomainName = (Get-AzKeyVaultSecret -VaultName kv-infrasecrets -Name domainname).SecretValue
              $secureOuPath = (Get-AzKeyVaultSecret -VaultName kv-infrasecrets -Name domainoupath).SecretValue
              # Convert KeyVault SecureString to Plaintext
              $domainAdminUser = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureDomainAdminUser)))
              $domainName = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureDomainName)))
              $ouPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureOuPath)))
              # Retrieve the VMTemplate information
              $vmTemplate = ($hostPool.VMTemplate | ConvertFrom-Json)
              # Retrieve the vNet and subnet information of the VM
              $sessionHostName = $($sessionHost.Name.Split("/")[1].Split(".")[0])
              $sessionHostRG = (Get-AzVM -Name $sessionHostName).ResourceGroupName
              $sessionHostLocation = (Get-AzVM -Name $sessionHostName).Location
              $vnetInfo = (Get-AzNetworkInterface -ResourceGroupName $sessionHostRG | where {$_.Name -like "$($sessionHostName)*"}).IpConfigurations[0].Subnet.id.Split("/")[8]
              $subnetInfo = (Get-AzNetworkInterface -ResourceGroupName $sessionHostRG | where {$_.Name -like "$($sessionHostName)*"}).IpConfigurations[0].Subnet.id.Split("/")[10]
              $vnetrgInfo = (Get-AzNetworkInterface -ResourceGroupName $sessionHostRG | where {$_.Name -like "$($sessionHostName)*"}).IpConfigurations[0].Subnet.id.Split("/")[4]
              # Retrieve Hostpool token
              $registrationInfo = Get-AzWvdRegistrationInfo -SubscriptionId $($azSubscriptions.Id) -ResourceGroupName $($hostpoolRG) -HostPoolName $($hostpoolName)
              if ($($registrationInfo.ExpirationTime) -le $((Get-Date).ToUniversalTime().ToString('MM/dd/yyyy HH:mm:ss')) -and $(!([string]::IsNullOrEmpty($registrationInfo.ExpirationTime))))
              {
                  $hostpoolToken = $registrationInfo.Token
              }
              else
              {
                  $hostpoolToken = $((New-AzWvdRegistrationInfo -ResourceGroupName $hostpoolRG -HostPoolName $HostPoolName -ExpirationTime $((Get-Date).ToUniversalTime().AddDays(1).ToString('yyyy-MM-ddTHH:mm:ss.fffffffZ'))).Token)
              }
              ## Create a Template Parameter Object (hashtable)
              $objTemplateParameter = @{
                  "hostpoolName" = $HostPoolName;
                  "hostpoolToken" = $($hostpoolToken);
                  "hostpoolResourceGroup" = $($hostPool.Id.Split("/")[4]);
                  "hostpoolProperties" = @{};
                  "hostpoolLocation" = $($hostPool.Location);
                  "createAvailabilitySet" = $false;
                  "vmInitialNumber" = $($sessionHosts.Count);
                  "vmResourceGroup" = $($sessionHostRG);
                  "vmLocation" = $($sessionHostLocation);
                  "vmSize" = $($vmTemplate.vmSize.id);
                  "vmNumberOfInstances" = $NumberOfInstances;
                  "vmNamePrefix" = $($vmTemplate.namePrefix);
                  "vmImageType" = $($vmTemplate.imageType);
                  "vmImageVhdUri" = [string]$($vmTemplate.imageUri);
                  "vmDiskType" = $($vmTemplate.osDiskType);
                  "vmUseManagedDisks" = $($vmTemplate.useManagedDisks);
                  "existingVnetName" = $($vnetInfo);
                  "existingSubnetName" = $($subnetInfo);
                  "virtualNetworkResourceGroupName" = $($vnetrgInfo);
                  "usePublicIP" = $false;
                  "createNetworkSecurityGroup" = $false;
                  "apiVersion" = "2019-12-10-preview";
                  "vmGalleryImageOffer" = $($vmTemplate.galleryImageOffer);
                  "vmGalleryImagePublisher" = $($vmTemplate.galleryImagePublisher);
                  "vmGalleryImageSKU" = $($vmTemplate.galleryImageSKU);
                  "administratorAccountUsername" = "$($domainAdminUser)";
                  "domain"="$($domainName)";
                  "ouPath"="$($ouPath)";
              }
              ## Show objTemplateParameter
              $objTemplateParameter
              # Temp location for the ARM template that will be used by this script (discarded when runbook is finished)
              $jsonARMTemplateFile = [string]($env:TEMP + "\WVDAT-AddToHostpool.json")
              # Storage location for custom ARM template
              $templateUrl="https://raw.githubusercontent.com/cognitionIT/AzureWVD/master/ARMTemplates/ARM-T-WVDAddSessionHostToHostpool.json"
              # Retrieve the template file and save it in a temp file location
              Invoke-WebRequest -Uri $templateUrl -OutFile $jsonARMTemplateFile -UseBasicParsing
              # ARM Template file
              $jsonARMTemplateFile = "..\ARMTemplates\ARM-T-WVDAddSessionHostToHostpool.json"
              ## Add SessionHosts to existing WVD Hostpool, based on ARM Template
              New-AzResourceGroupDeployment -ResourceGroupName $hostpoolRG -TemplateFile $jsonARMTemplateFile -TemplateParameterObject $objTemplateParameter -administratorAccountPassword $secureAdminPassword -Verbose
        azPSVersion: 'latest'