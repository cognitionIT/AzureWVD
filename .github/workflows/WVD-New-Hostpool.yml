name: WVD - New Hostpool with SIG image
on: workflow_dispatch

env:
  AZURE_HOSTPOOL_NAME: "hp-wvd-gha"              # WVD Hostpool name
  AZURE_NUMBER_OF_INSTANCES: 1                   # Number of instances to add to the WVD Hostpool
  SIG_IMAGE_DEF_NAME: win10-evd-20h2

jobs:
  build:
    name: ARM - Create WVD Hostpool
    runs-on: windows-latest
    steps:
    # Authentication: log on to Azure with the AZURE_CREDENTIALS secret
    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
        enable-AzPSSession: true 
    
    # Azure PowerShell: Run inline script    
    - name: Run Azure PowerShell script (inline)
      uses: azure/powershell@v1
      with:
        inlineScript: |
          # Read the environment variables in PowerShell
          [string]$HostPoolName = [System.Environment]::GetEnvironmentVariable('AZURE_HOSTPOOL_NAME')
          [int]$NumberOfInstances = [System.Environment]::GetEnvironmentVariable('AZURE_NUMBER_OF_INSTANCES')
          
          # Retrieve sensitive information from KeyVault
          $secureAdminPassword = (Get-AzKeyVaultSecret -VaultName kv-infrasecrets -Name domainadminpassword).SecretValue
          $secureDomainAdminUser = (Get-AzKeyVaultSecret -VaultName kv-infrasecrets -Name domainadminuser).SecretValue
          $secureDomainName = (Get-AzKeyVaultSecret -VaultName kv-infrasecrets -Name domainname).SecretValue
          $secureOuPath = (Get-AzKeyVaultSecret -VaultName kv-infrasecrets -Name domainoupath).SecretValue
          
          # Convert KeyVault SecureString to Plaintext
          $domainAdminUser = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureDomainAdminUser)))
          $domainName = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureDomainName)))
          $ouPath = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureOuPath)))

          $postFix = "wvd-gha"

          ## Create a Template Parameter Object (hashtable)
          $objTemplateParameter = @{
            "hostpoolName" = "hp-$($postFix)";
            "hostpoolDescription" = "Created by GitHub Actions, PowerShell and ARM Template";
            "location" = "eastus";
            "validationEnvironment" = $false;
            "addToWorkspace" = $true;
            "workSpaceName" = "ws-$($postFix)";
            "workspaceLocation" = "eastus";
            "workspaceResourceGroup" = "rg-wvd-infra";
            "allApplicationGroupReferences" = "";
            "createAvailabilitySet" = $true;
            "vmResourceGroup" = "rg-wvd-resources";
            "vmLocation" = "westeurope";
            "vmSize" = "Standard_D2s_v3";
            "vmNumberOfInstances" = $NumberOfInstances;
            "vmNamePrefix" = "sh-$($postFix)";
            "vmImageType" = "CustomImage";
            "vmCustomImageSourceId" = "/subscriptions/${{secrets.AZURE_SUBSCRIPTIONID}}/resourceGroups/rg-wvd-images/providers/Microsoft.Compute/galleries/sigWVDImages/images/${{env.SIG_IMAGE_DEF_NAME}}";
            "vmDiskType" = "StandardSSD_LRS";
            "vmUseManagedDisks" = $true;
            "existingVnetName" = "vnet-wvd-resources";
            "existingSubnetName" = "default";
            "virtualNetworkResourceGroupName" = "rg-wvd-resources";
            "usePublicIP" = $false;
            "createNetworkSecurityGroup" = $false;
            "hostpoolType" = "Pooled";
            "maxSessionLimit" = 25;
            "loadBalancerType" = "BreadthFirst";
            "vmTemplate" = "{`"domain`"`:`"$($domainName)`",`"galleryImageOffer`"`:null,`"galleryImagePublisher`"`:null,`"galleryImageSKU`"`:null,`"imageType`"`:`"CustomImage`",`"imageUri`"`:null,`"customImageId`"`:`"/subscriptions/${{secrets.AZURE_SUBSCRIPTIONID}}/resourceGroups/rg-wvd-images/providers/Microsoft.Compute/galleries/sigWVDImages/images/${{env.SIG_IMAGE_DEF_NAME}}`",`"namePrefix`":`"sh-$($postFix)`",`"osDiskType`"`:`"StandardSSD_LRS`",`"useManagedDisks`"`:true,`"vmSize`"`:{`"id`"`:`"Standard_D2s_v3`",`"cores`"`:2,`"ram`"`:8},`"galleryItemId`"`:null}";
            "tokenExpirationTime" = $(Get-Date ((Get-Date).AddDays(25)) -Format "yyyy-MM-ddTHH:mm:ss.fffZ");
            "apiVersion" = "2019-12-10-preview";
            "administratorAccountUsername" = "$($domainAdminUser)";
            "domain"="$($domainName)";
            "ouPath"="$($ouPath)";
          }
            
          ## Show objTemplateParameter
          #$objTemplateParameter
          
          # Temp location for the ARM template that will be used by this script (discarded when runbook is finished)
          $jsonARMTemplateFile = [string]($env:TEMP + "\WVDAT-NewHostpool.json")
          
          # Storage location for custom ARM template
          $templateUrl="https://raw.githubusercontent.com/cognitionIT/AzureWVD/master/ARMTemplates/ARM-T-WVDCreateHostpool.json"
          
          # Retrieve the template file and save it in a temp file location
          Invoke-WebRequest -Uri $templateUrl -OutFile $jsonARMTemplateFile -UseBasicParsing
          
          # ARM Template file
          ## Add SessionHosts to existing WVD Hostpool, based on ARM Template
          New-AzResourceGroupDeployment -ResourceGroupName "rg-wvd-infra" -TemplateFile $jsonARMTemplateFile -TemplateParameterObject $objTemplateParameter -administratorAccountPassword $secureAdminPassword #-Verbose
        azPSVersion: 'latest'
